학기 최종 과제 안내입니다.



학생분들은 RE -> ε-NFA -> DFA -> reduced DFA 변환기를 구현하시고 제출하시기 바랍니다.



구현 조건

1. 입력: 정규표현

- 정규표현을 위한 알파벳은 a~z, A~Z, 0~9 총 62개로 제한

- 정규표현을 위한 연산자는  +, •, * 로 구성

- •의 경우는 축약 표현이 가능함. 예) a•b  ---> ab

- 우선 순위를 위해 () 사용이 가능함





2. 출력: 단계별로 FA(유한 오토마타) 정보가 기록된 파일

- ε-NFA

- DFA

- reduced DFA



3. 유한 오토마타 정보는 아래와 같은 포맷을 반드시 준수하기 바람.

- 유한 오토마타의 내용은 아래 5가지 항목이 순서대로 나와야 함.

- 각 항목은 아래와 같은 StateSet, TerminalSet, DeltaFunctions, StartState, FinalStateSet 의 키워드로 구분되며, 원소를 표현하기 위한 구분자는 {}를 이용

- 상태는 q로 시작하고 숫자 3자리로 구성됨

- 터미널 심볼은 a~z, A~Z, 0~9 로 제한 함

- 입실론 심볼은 ε를 사용 

- 상태전이함수는 아래 예시와 같이 (상태, 터미널) = { 출력상태1, 출력상태2 } 와 같이 구성됨

- 시작 상태와 종결 상태는 아래와 같이 임의의 상태, 상태 집합으로 정의함



예시)

StateSet = { q000, q001, q002 }

TerminalSet = { a, b, c, d }

DeltaFunctions = {

	(q000, a) = {q000, q001, ...}

	(q000, b) = {q000, q002, ...}

	(q001, a) = {q000, q005, ...}

	(q001, ε) = {q000, q001, ...}

}

StartState = q000

FinalStateSet = { q100, q220 }





4. 아래 예제를 포함하여 교재의 다양한 예시를 이용, 10개의 정규표현을 대상으로 실험 및 검증하시오.

(a+b)*abb

(b+a(aa*b)*b)*

(b+aa+ac+aaa+aac)*

(1+01)*00(0+1)*

(0+1)*011  



5. 과제 구현 코드는 별도 파일로 압축해서 제출



6. 중요 코드는 발췌해서 설명 필수



7. 사용 언어는 자유



8. 구현 소감 필수





* 힌트

정규 표현을 ε-NFA 로 변환하기 위해서는 정규 표현을 우선순위를 반영한 트리형태로 변환하고,

트리를 bottom-up(DFS)으로 분석하면서 ε-NFA를 구성하기 바람.



** 문의사항이 있는 경우 plass lab github의 FormalLanguages 리포지토리의 issues를 활용하시기 바랍니다. (question 레이블 사용 필수)

https://github.com/PLASS-Lab/FormalLanguages/issues



*** 기말고사 기간을 고려하여 과제 제출 스케쥴을 잘 계획하시기 바랍니다.

